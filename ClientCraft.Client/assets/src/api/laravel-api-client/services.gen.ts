// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetAccountNotesData, GetAccountNotesError, GetAccountNotesResponse, CreateAccountNoteData, CreateAccountNoteError, CreateAccountNoteResponse, GetAccountNoteData, GetAccountNoteError, GetAccountNoteResponse, UpdateAccountNoteData, UpdateAccountNoteError, UpdateAccountNoteResponse, DeleteAccountNoteData, DeleteAccountNoteError, DeleteAccountNoteResponse, GetAccountsV2Data, CreateAccountV2Data, CreateAccountV2Error, CreateAccountV2Response, GetAccountV2Data, GetAccountV2Error, GetAccountV2Response, UpdateAccountV2Data, UpdateAccountV2Error, UpdateAccountV2Response, DeleteAccountV2Data, DeleteAccountV2Error, DeleteAccountV2Response, GetAccountNamesError, GetAccountNamesResponse, GetContactNotesData, GetContactNotesError, GetContactNotesResponse, CreateContactNoteData, CreateContactNoteError, CreateContactNoteResponse, GetContactNoteData, GetContactNoteError, GetContactNoteResponse, UpdateContactNoteData, UpdateContactNoteError, UpdateContactNoteResponse, DeleteContactNoteData, DeleteContactNoteError, DeleteContactNoteResponse, GetContactsV2Data, CreateContactV2Data, CreateContactV2Error, CreateContactV2Response, GetContactV2Data, GetContactV2Error, GetContactV2Response, UpdateContactV2Data, UpdateContactV2Error, UpdateContactV2Response, DeleteContactV2Data, DeleteContactV2Error, DeleteContactV2Response, GetContactNamesError, GetContactNamesResponse, CreateDealV2Data, CreateDealV2Error, CreateDealV2Response, GetDealV2Data, GetDealV2Error, GetDealV2Response, UpdateDealV2Data, UpdateDealV2Error, UpdateDealV2Response, DeleteDealV2Data, DeleteDealV2Error, DeleteDealV2Response, GetDealNamesError, GetDealNamesResponse, GetLeadNotesData, GetLeadNotesError, GetLeadNotesResponse, CreateLeadNoteData, CreateLeadNoteError, CreateLeadNoteResponse, GetLeadNoteData, GetLeadNoteError, GetLeadNoteResponse, UpdateLeadNoteData, UpdateLeadNoteError, UpdateLeadNoteResponse, DeleteLeadNoteData, DeleteLeadNoteError, DeleteLeadNoteResponse, CreateLeadPhotoData, CreateLeadPhotoError, CreateLeadPhotoResponse, GetLeadPhotoData, GetLeadPhotoError, GetLeadPhotoResponse, UpdateLeadPhotoData, UpdateLeadPhotoError, UpdateLeadPhotoResponse, DeleteLeadPhotoData, DeleteLeadPhotoError, DeleteLeadPhotoResponse, GetLeadStatusesError, GetLeadStatusesResponse, CreateLeadStatusData, CreateLeadStatusError, CreateLeadStatusResponse, UpdateLeadStatusData, UpdateLeadStatusError, UpdateLeadStatusResponse, DeleteLeadStatusData, DeleteLeadStatusError, DeleteLeadStatusResponse, GetLeadsV2Data, GetLeadsV2Error, GetLeadsV2Response, CreateLeadV2Data, CreateLeadV2Error, CreateLeadV2Response, GetLeadV2Data, GetLeadV2Error, GetLeadV2Response, UpdateLeadV2Data, UpdateLeadV2Error, UpdateLeadV2Response, DeleteLeadV2Data, DeleteLeadV2Error, DeleteLeadV2Response, ConvertLeadV2Data, ConvertLeadV2Error, ConvertLeadV2Response, AuthenticateData, AuthenticateError, AuthenticateResponse, WebRtcTokenError, WebRtcTokenResponse, GetUsersV2Data, GetUsersV2Error, GetUsersV2Response, CreateUserV2Data, CreateUserV2Error, CreateUserV2Response, GetUserV2Data, GetUserV2Error, GetUserV2Response, UpdateUserV2Data, UpdateUserV2Error, UpdateUserV2Response, DeleteUserV2Data, DeleteUserV2Error, DeleteUserV2Response } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all notes for an account
 */
export const getAccountNotes = <ThrowOnError extends boolean = false>(options: Options<GetAccountNotesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountNotesResponse, GetAccountNotesError, ThrowOnError>({
        ...options,
        url: '/account/{account}/note'
    });
};

/**
 * Create a new note for an account
 */
export const createAccountNote = <ThrowOnError extends boolean = false>(options: Options<CreateAccountNoteData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAccountNoteResponse, CreateAccountNoteError, ThrowOnError>({
        ...options,
        url: '/account/{account}/note'
    });
};

/**
 * Retrieve a specific note for an account
 */
export const getAccountNote = <ThrowOnError extends boolean = false>(options: Options<GetAccountNoteData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountNoteResponse, GetAccountNoteError, ThrowOnError>({
        ...options,
        url: '/account/{account}/note/{note}'
    });
};

/**
 * Update a specific note for an account
 */
export const updateAccountNote = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountNoteData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateAccountNoteResponse, UpdateAccountNoteError, ThrowOnError>({
        ...options,
        url: '/account/{account}/note/{note}'
    });
};

/**
 * Delete a specific note for an account
 */
export const deleteAccountNote = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountNoteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountNoteResponse, DeleteAccountNoteError, ThrowOnError>({
        ...options,
        url: '/account/{account}/note/{note}'
    });
};

/**
 * List all account
 */
export const getAccountsV2 = <ThrowOnError extends boolean = false>(options?: Options<GetAccountsV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/account'
    });
};

/**
 * Create a new account
 * Endpoint to create a new account with the provided details.
 */
export const createAccountV2 = <ThrowOnError extends boolean = false>(options: Options<CreateAccountV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAccountV2Response, CreateAccountV2Error, ThrowOnError>({
        ...options,
        url: '/account'
    });
};

/**
 * Get details of a specific account
 */
export const getAccountV2 = <ThrowOnError extends boolean = false>(options: Options<GetAccountV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountV2Response, GetAccountV2Error, ThrowOnError>({
        ...options,
        url: '/account/{id}'
    });
};

/**
 * Update a specific account
 */
export const updateAccountV2 = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateAccountV2Response, UpdateAccountV2Error, ThrowOnError>({
        ...options,
        url: '/account/{id}'
    });
};

/**
 * Delete a specific account
 */
export const deleteAccountV2 = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountV2Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountV2Response, DeleteAccountV2Error, ThrowOnError>({
        ...options,
        url: '/account/{id}'
    });
};

/**
 * Get all account names
 */
export const getAccountNames = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountNamesResponse, GetAccountNamesError, ThrowOnError>({
        ...options,
        url: '/account/names'
    });
};

/**
 * Get all notes for an contact
 */
export const getContactNotes = <ThrowOnError extends boolean = false>(options: Options<GetContactNotesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContactNotesResponse, GetContactNotesError, ThrowOnError>({
        ...options,
        url: '/contact/{contact}/note'
    });
};

/**
 * Create a new note for an contact
 */
export const createContactNote = <ThrowOnError extends boolean = false>(options: Options<CreateContactNoteData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateContactNoteResponse, CreateContactNoteError, ThrowOnError>({
        ...options,
        url: '/contact/{contact}/note'
    });
};

/**
 * Retrieve a specific note for an contact
 */
export const getContactNote = <ThrowOnError extends boolean = false>(options: Options<GetContactNoteData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContactNoteResponse, GetContactNoteError, ThrowOnError>({
        ...options,
        url: '/contact/{contact}/note/{note}'
    });
};

/**
 * Update a specific note for an contact
 */
export const updateContactNote = <ThrowOnError extends boolean = false>(options: Options<UpdateContactNoteData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateContactNoteResponse, UpdateContactNoteError, ThrowOnError>({
        ...options,
        url: '/contact/{contact}/note/{note}'
    });
};

/**
 * Delete a specific note for an contact
 */
export const deleteContactNote = <ThrowOnError extends boolean = false>(options: Options<DeleteContactNoteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteContactNoteResponse, DeleteContactNoteError, ThrowOnError>({
        ...options,
        url: '/contact/{contact}/note/{note}'
    });
};

/**
 * List all contact
 */
export const getContactsV2 = <ThrowOnError extends boolean = false>(options?: Options<GetContactsV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/contact'
    });
};

/**
 * Create a new contact
 * Endpoint to create a new contact with the provided details.
 */
export const createContactV2 = <ThrowOnError extends boolean = false>(options: Options<CreateContactV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateContactV2Response, CreateContactV2Error, ThrowOnError>({
        ...options,
        url: '/contact'
    });
};

/**
 * Get details of a specific contact
 */
export const getContactV2 = <ThrowOnError extends boolean = false>(options: Options<GetContactV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContactV2Response, GetContactV2Error, ThrowOnError>({
        ...options,
        url: '/contact/{id}'
    });
};

/**
 * Update a specific contact
 */
export const updateContactV2 = <ThrowOnError extends boolean = false>(options: Options<UpdateContactV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateContactV2Response, UpdateContactV2Error, ThrowOnError>({
        ...options,
        url: '/contact/{id}'
    });
};

/**
 * Delete a specific contact
 */
export const deleteContactV2 = <ThrowOnError extends boolean = false>(options: Options<DeleteContactV2Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteContactV2Response, DeleteContactV2Error, ThrowOnError>({
        ...options,
        url: '/contact/{id}'
    });
};

/**
 * Get all contact names
 */
export const getContactNames = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContactNamesResponse, GetContactNamesError, ThrowOnError>({
        ...options,
        url: '/contact/names'
    });
};

/**
 * List all deal
 */
export const getDealsV2 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/deal'
    });
};

/**
 * Create a new deal
 * Endpoint to create a new deal with the provided details.
 */
export const createDealV2 = <ThrowOnError extends boolean = false>(options: Options<CreateDealV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateDealV2Response, CreateDealV2Error, ThrowOnError>({
        ...options,
        url: '/deal'
    });
};

/**
 * Get details of a specific deal
 */
export const getDealV2 = <ThrowOnError extends boolean = false>(options: Options<GetDealV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDealV2Response, GetDealV2Error, ThrowOnError>({
        ...options,
        url: '/deal/{id}'
    });
};

/**
 * Update a specific deal
 */
export const updateDealV2 = <ThrowOnError extends boolean = false>(options: Options<UpdateDealV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateDealV2Response, UpdateDealV2Error, ThrowOnError>({
        ...options,
        url: '/deal/{id}'
    });
};

/**
 * Delete a specific deal
 */
export const deleteDealV2 = <ThrowOnError extends boolean = false>(options: Options<DeleteDealV2Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteDealV2Response, DeleteDealV2Error, ThrowOnError>({
        ...options,
        url: '/deal/{id}'
    });
};

/**
 * Get all deal names
 */
export const getDealNames = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDealNamesResponse, GetDealNamesError, ThrowOnError>({
        ...options,
        url: '/deal/names'
    });
};

/**
 * Get all note for a lead
 */
export const getLeadNotes = <ThrowOnError extends boolean = false>(options: Options<GetLeadNotesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadNotesResponse, GetLeadNotesError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/note'
    });
};

/**
 * Create a new note for a lead
 */
export const createLeadNote = <ThrowOnError extends boolean = false>(options: Options<CreateLeadNoteData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLeadNoteResponse, CreateLeadNoteError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/note'
    });
};

/**
 * Retrieve a specific note for a lead
 */
export const getLeadNote = <ThrowOnError extends boolean = false>(options: Options<GetLeadNoteData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadNoteResponse, GetLeadNoteError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/note/{note}'
    });
};

/**
 * Update a specific note for a lead
 */
export const updateLeadNote = <ThrowOnError extends boolean = false>(options: Options<UpdateLeadNoteData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateLeadNoteResponse, UpdateLeadNoteError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/note/{note}'
    });
};

/**
 * Delete a specific note for a lead
 */
export const deleteLeadNote = <ThrowOnError extends boolean = false>(options: Options<DeleteLeadNoteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLeadNoteResponse, DeleteLeadNoteError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/note/{note}'
    });
};

/**
 * Create a new photo for a lead
 */
export const createLeadPhoto = <ThrowOnError extends boolean = false>(options: Options<CreateLeadPhotoData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLeadPhotoResponse, CreateLeadPhotoError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/photo'
    });
};

/**
 * Retrieve a specific photo for a lead
 */
export const getLeadPhoto = <ThrowOnError extends boolean = false>(options: Options<GetLeadPhotoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadPhotoResponse, GetLeadPhotoError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/photo/{photo}'
    });
};

/**
 * Update a specific photo for a lead
 */
export const updateLeadPhoto = <ThrowOnError extends boolean = false>(options: Options<UpdateLeadPhotoData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateLeadPhotoResponse, UpdateLeadPhotoError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/photo/{photo}'
    });
};

/**
 * Delete a specific photo for a lead
 */
export const deleteLeadPhoto = <ThrowOnError extends boolean = false>(options: Options<DeleteLeadPhotoData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLeadPhotoResponse, DeleteLeadPhotoError, ThrowOnError>({
        ...options,
        url: '/lead/{lead}/photo/{photo}'
    });
};

/**
 * Get all lead statuses
 */
export const getLeadStatuses = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadStatusesResponse, GetLeadStatusesError, ThrowOnError>({
        ...options,
        url: '/lead/status'
    });
};

/**
 * Create a new lead status
 */
export const createLeadStatus = <ThrowOnError extends boolean = false>(options: Options<CreateLeadStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLeadStatusResponse, CreateLeadStatusError, ThrowOnError>({
        ...options,
        url: '/lead/status'
    });
};

/**
 * Update a specific lead status
 */
export const updateLeadStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateLeadStatusData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateLeadStatusResponse, UpdateLeadStatusError, ThrowOnError>({
        ...options,
        url: '/lead/status/{status}'
    });
};

/**
 * Delete a specific lead status
 */
export const deleteLeadStatus = <ThrowOnError extends boolean = false>(options: Options<DeleteLeadStatusData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLeadStatusResponse, DeleteLeadStatusError, ThrowOnError>({
        ...options,
        url: '/lead/status/{status}'
    });
};

/**
 * List all leads
 */
export const getLeadsV2 = <ThrowOnError extends boolean = false>(options?: Options<GetLeadsV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadsV2Response, GetLeadsV2Error, ThrowOnError>({
        ...options,
        url: '/lead'
    });
};

/**
 * Create a new lead
 * Endpoint to create a new lead with the provided details.
 */
export const createLeadV2 = <ThrowOnError extends boolean = false>(options: Options<CreateLeadV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLeadV2Response, CreateLeadV2Error, ThrowOnError>({
        ...options,
        url: '/lead'
    });
};

/**
 * Get details of a specific lead
 */
export const getLeadV2 = <ThrowOnError extends boolean = false>(options: Options<GetLeadV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLeadV2Response, GetLeadV2Error, ThrowOnError>({
        ...options,
        url: '/lead/{id}'
    });
};

/**
 * Update a specific lead
 */
export const updateLeadV2 = <ThrowOnError extends boolean = false>(options: Options<UpdateLeadV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateLeadV2Response, UpdateLeadV2Error, ThrowOnError>({
        ...options,
        url: '/lead/{id}'
    });
};

/**
 * Delete a specific lead
 */
export const deleteLeadV2 = <ThrowOnError extends boolean = false>(options: Options<DeleteLeadV2Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLeadV2Response, DeleteLeadV2Error, ThrowOnError>({
        ...options,
        url: '/lead/{id}'
    });
};

/**
 * Create a new lead
 * Endpoint to convert a lead with the provided details.
 */
export const convertLeadV2 = <ThrowOnError extends boolean = false>(options: Options<ConvertLeadV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<ConvertLeadV2Response, ConvertLeadV2Error, ThrowOnError>({
        ...options,
        url: '/lead/convert'
    });
};

/**
 * Returns a authentication user token
 * This endpoint returns a JWT token for external usage
 */
export const authenticate = <ThrowOnError extends boolean = false>(options?: Options<AuthenticateData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthenticateResponse, AuthenticateError, ThrowOnError>({
        ...options,
        url: '/login/token'
    });
};

/**
 * Get WebRTC to connect to OpenApi
 * Handle RTC connect and fetch from OpenAI API
 */
export const webRtcToken = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<WebRtcTokenResponse, WebRtcTokenError, ThrowOnError>({
        ...options,
        url: '/rtc-connect'
    });
};

/**
 * List all users
 */
export const getUsersV2 = <ThrowOnError extends boolean = false>(options?: Options<GetUsersV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersV2Response, GetUsersV2Error, ThrowOnError>({
        ...options,
        url: '/user'
    });
};

/**
 * Create a new user
 * Endpoint to create a new user with the provided details.
 */
export const createUserV2 = <ThrowOnError extends boolean = false>(options: Options<CreateUserV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserV2Response, CreateUserV2Error, ThrowOnError>({
        ...options,
        url: '/user'
    });
};

/**
 * Get details of a specific user
 */
export const getUserV2 = <ThrowOnError extends boolean = false>(options: Options<GetUserV2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserV2Response, GetUserV2Error, ThrowOnError>({
        ...options,
        url: '/user/{reference}'
    });
};

/**
 * Update a specific user
 */
export const updateUserV2 = <ThrowOnError extends boolean = false>(options: Options<UpdateUserV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateUserV2Response, UpdateUserV2Error, ThrowOnError>({
        ...options,
        url: '/user/{reference}'
    });
};

/**
 * Delete a specific user
 */
export const deleteUserV2 = <ThrowOnError extends boolean = false>(options: Options<DeleteUserV2Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserV2Response, DeleteUserV2Error, ThrowOnError>({
        ...options,
        url: '/user/{reference}'
    });
};